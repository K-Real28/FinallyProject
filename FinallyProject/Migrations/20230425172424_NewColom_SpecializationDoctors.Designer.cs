// <auto-generated />
using System;
using FinallyProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinallyProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230425172424_NewColom_SpecializationDoctors")]
    partial class NewColom_SpecializationDoctors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinallyProject.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FinallyProject.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CostOfVisit")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpOfSpec")
                        .HasColumnType("text");

                    b.Property<string>("FullInfo")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("ShortInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FinallyProject.Models.Polyclinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Polyclinics");
                });

            modelBuilder.Entity("FinallyProject.Models.PolyclinicDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("PolyclinicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("PolyclinicDoctors");
                });

            modelBuilder.Entity("FinallyProject.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("FinallyProject.Models.SpecializationDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("PolyclinicId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecializitionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("SpecializationDoctors");
                });

            modelBuilder.Entity("FinallyProject.Models.Polyclinic", b =>
                {
                    b.HasOne("FinallyProject.Models.City", "City")
                        .WithMany("Polyclinics")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FinallyProject.Models.PolyclinicDoctor", b =>
                {
                    b.HasOne("FinallyProject.Models.Doctor", "Doctor")
                        .WithMany("PolyclinicDoctors")
                        .HasForeignKey("DoctorId");

                    b.HasOne("FinallyProject.Models.Polyclinic", "Polyclinic")
                        .WithMany("PolyclinicDoctors")
                        .HasForeignKey("PolyclinicId");

                    b.Navigation("Doctor");

                    b.Navigation("Polyclinic");
                });

            modelBuilder.Entity("FinallyProject.Models.SpecializationDoctor", b =>
                {
                    b.HasOne("FinallyProject.Models.Doctor", "Doctor")
                        .WithMany("SpecializationDoctors")
                        .HasForeignKey("DoctorId");

                    b.HasOne("FinallyProject.Models.Polyclinic", null)
                        .WithMany("SpecializationDoctors")
                        .HasForeignKey("PolyclinicId");

                    b.HasOne("FinallyProject.Models.Specialization", "Specialization")
                        .WithMany("SpecializationDoctors")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("FinallyProject.Models.City", b =>
                {
                    b.Navigation("Polyclinics");
                });

            modelBuilder.Entity("FinallyProject.Models.Doctor", b =>
                {
                    b.Navigation("PolyclinicDoctors");

                    b.Navigation("SpecializationDoctors");
                });

            modelBuilder.Entity("FinallyProject.Models.Polyclinic", b =>
                {
                    b.Navigation("PolyclinicDoctors");

                    b.Navigation("SpecializationDoctors");
                });

            modelBuilder.Entity("FinallyProject.Models.Specialization", b =>
                {
                    b.Navigation("SpecializationDoctors");
                });
#pragma warning restore 612, 618
        }
    }
}
